using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web.Mvc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SAID_MVCWebApplication;
using SAID_MVCWebApplication.Controllers;
using SAID_MVCWebApplication.SAID_ServiceReference;

namespace SAID_MVCWebApplication.Tests.Controllers
{
	[TestClass]
	public class HomeControllerTest
	{
		#region Generate ID Number.
		[TestMethod]
		public void TestGetRandomIDNumber() //Is an ID Number generated by the service.
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.GetRandomIDNumber()).Data as SAIDGeneratorResponse;

			Assert.IsTrue(actual.Success);
		}
		#endregion

		#region Validate ID Number.
		[TestMethod]
		public void ValidateNullIDNumber() //Is a null ID Number validated.
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.ValidateIDNumber(null)).Data as SAIDGeneratorResponse;

			Assert.IsTrue(!actual.Success);
		}
		[TestMethod]
		public void ValidateEmptyIDNumber() //Is an empty string ID Number validated.
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.ValidateIDNumber("      ")).Data as SAIDGeneratorResponse;

			Assert.IsTrue(!actual.Success);
		}
		[TestMethod]
		public void ValidateAlphaRegexIDNumber() //Is an ID Number containing non-numericals validated. 
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.ValidateIDNumber("65120198y6t55")).Data as SAIDGeneratorResponse;

			Assert.IsTrue(!actual.Success);
		}
		[TestMethod]
		public void ValidateShorterLengthRegexIDNumber() //Is an ID Number shorter than 13 characters in length validated. 
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.ValidateIDNumber("651009524508")).Data as SAIDGeneratorResponse;

			Assert.IsTrue(!actual.Success);
		}
		[TestMethod]
		public void ValidateLongerLengthRegexIDNumber() //Is an ID Number longer than 13 characters in length validated. 
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.ValidateIDNumber("65100952450811")).Data as SAIDGeneratorResponse;

			Assert.IsTrue(!actual.Success);
		}
		[TestMethod]
		public void ValidateKnownIDNumber() //Is a valid ID Number validated as correct. 
		{
			HomeController controller = new HomeController();
			SAIDGeneratorResponse actual = ((JsonResult)controller.GetRandomIDNumber()).Data as SAIDGeneratorResponse;//Gets a valid randomly generated ID.

			string IDNumber = "3309161565066";

			if (actual.Success) //Error from service - try a known valid ID number.
			{
				IDNumber = actual.Message;
			}

			actual = ((JsonResult)controller.ValidateIDNumber(IDNumber)).Data as SAIDGeneratorResponse;
			Assert.IsTrue(actual.Success);
		}
		#endregion
	}
}
